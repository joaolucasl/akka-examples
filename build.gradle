buildscript {
	ext {
		kotlinVersion = '1.2.41'
		springBootVersion = '2.0.2.RELEASE'
		dockerVersion = '1.2'
		akkaVersion = '2.5.12'
		scalaJavaCompatVersion = '0.8.0'
		guavaVersion = '24.1-jre'
		akkaPersistenceJdbcVersion = '3.2.0'
		orgSlf4jVersion = '1.7.25'
		logbackVersion = '1.2.3'
        commonsLang3Version = '3.7'
        reactorTestVersion = '3.1.7.RELEASE'
        jacksonModuleKotlin = '2.9.5'
        mysqlLibVersion = '8.0.8-dmr'
        protobufGradlePluginVersion = '0.8.5'
	}
	repositories {
		mavenCentral()
		maven { url = "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		classpath("se.transmode.gradle:gradle-docker:${dockerVersion}")
        //classpath("com.google.protobuf:protobuf-gradle-plugin:${protobufGradlePluginVersion}")
	}
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'kotlin-spring'
    apply plugin: 'idea'
    //apply plugin: 'com.google.protobuf'
    if(project.name.endsWith("node") || project.name == "akka-examples"){
        apply plugin: 'docker'
        apply plugin: 'org.springframework.boot'
    }
    apply plugin: 'io.spring.dependency-management'


    group = 'marcos.akka'
    version = '1.0-SNAPSHOT'
    sourceCompatibility = 1.8

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
            suppressWarnings = true
        }
    }

    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
            suppressWarnings = true
        }
    }

    repositories {
        mavenCentral()
        maven { url = "https://repo.spring.io/milestone" }
        mavenLocal()
    }


    dependencies {
        if(project.name.endsWith("node") || project.name == "akka-examples"){
            compile('org.springframework.boot:spring-boot-starter')
            testCompile('org.springframework.boot:spring-boot-starter-test')
        }

        if(project.name != "akka-examples" && project.name != "common-model" && project.name != "common-configs"){
            compile project(':common-model')
        }
        compile("org.scala-lang.modules:scala-java8-compat_2.12:${scalaJavaCompatVersion}")
        if(project.name != "common-configs"){
            compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
            compile("org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}")
            compile("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonModuleKotlin}")
            compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
            compile("org.jetbrains.kotlin:kotlin-reflect")
            runtime("org.springframework.boot:spring-boot-devtools:${springBootVersion}")
            runtime("mysql:mysql-connector-java:${mysqlLibVersion}")
            compile("org.apache.commons:commons-lang3:${commonsLang3Version}")
            compile("com.typesafe.akka:akka-actor_2.12:${akkaVersion}")
            compile("com.typesafe.akka:akka-remote_2.12:${akkaVersion}")
            compile("com.typesafe.akka:akka-cluster_2.12:${akkaVersion}")
            compile("com.typesafe.akka:akka-cluster-tools_2.12:${akkaVersion}")
            compile("com.typesafe.akka:akka-persistence_2.12:${akkaVersion}")
            compile("com.typesafe.akka:akka-persistence-query_2.12:${akkaVersion}")
            compile("com.typesafe.akka:akka-slf4j_2.12:${akkaVersion}")
            compile("com.github.dnvriend:akka-persistence-jdbc_2.12:${akkaPersistenceJdbcVersion}")
            compile("com.google.guava:guava:${guavaVersion}")
            compile("org.slf4j:slf4j-api:${orgSlf4jVersion}")
            compile("org.slf4j:jcl-over-slf4j:${orgSlf4jVersion}")
            compile("ch.qos.logback:logback-classic:${logbackVersion}")
            compile("ch.qos.logback:logback-core:${logbackVersion}")
            testCompile("com.typesafe.akka:akka-testkit_2.12:${akkaVersion}")
            testCompile("io.projectreactor:reactor-test:${reactorTestVersion}")
        }
        if(project.name == "common-configs") {
            compile project(':ator-local')
            compile project(':ator-remoto')
            compile project(':agendamento')
            compile project(':cluster')
            compile project(':roteamento')
            compile project(':sharding')
            compile project(':maquinaDeEstadoFinito')
            compile project(':persistencia')
        }

        if(project.name.endsWith("node")){
            compile project(':common-configs')
            compile project(':common-model')
            compile project(':ator-local')
            compile project(':ator-remoto')
            compile project(':agendamento')
            compile project(':cluster')
            compile project(':roteamento')
            compile project(':sharding')
            compile project(':maquinaDeEstadoFinito')
            compile project(':persistencia')
        }

        if(project.name == "akka-examples"){
            compile project(':common-configs')
        }
    }
}

dependencies {
	compile project(':common-configs')
	compile project(':common-model')
	compile project(':ator-local')
	compile project(':ator-remoto')
	compile project(':agendamento')
	compile project(':cluster')
	compile project(':roteamento')
	compile project(':sharding')
	compile project(':maquinaDeEstadoFinito')
	compile project(':persistencia')
}
